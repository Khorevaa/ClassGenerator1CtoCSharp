Перем СтрПриватныеЧлены;
Перем СтрОписаниеКласса;
Перем СтрСвойства;
Перем СтрМетоды;
Перем СтрКонструкторы;
Перем СтрИспользования;
Перем КартаТипов;

Функция ЧистаяСтрокаИмени(Стр)
	Возврат СтрЗаменить(СтрЗаменить(СокрЛП(Стр),"<",""),">","");
КонецФункции

Функция РазметитьОписание(Стр)
	
	Результат = "";
	
	Для А = 1 по СтрЧислоСтрок(СокрЛП(Стр)) Цикл
		Результат = Результат + Символы.ПС + "/// " + СтрПолучитьСтроку(Стр,А);
	КонецЦикла;
	
	Возврат (Результат);
	
КонецФункции

Функция ПолучитьШарпТип(КоллекцияТипов)
	
	Если КоллекцияТипов.Количество() > 1 Тогда
		Возврат "IValue";
	КонецЕсли;
	
	Если КартаТипов.Получить(КоллекцияТипов[0].Тип) <> Неопределено Тогда
		Возврат КартаТипов.Получить(КоллекцияТипов[0].Тип);
	КонецЕсли;
	
	Возврат "IValue";
	
КонецФункции

Процедура ОбработатьМетоды(ТипИсточник)
	
	Выборка = Справочники.Методы.Выбрать(,ТипИсточник);
	Пока Выборка.Следующий() Цикл
		
		//# Перебор вариантов синтаксиса
		Для каждого Синтаксис Из Выборка.ВариантыСинтаксиса Цикл
			
			СтрМетоды  = СтрМетоды + "
			|/// <summary>
			|/// " + РазметитьОписание(Выборка.Описание) + "
			|/// </summary>
			|///
			|";
			
			СтрМетоды  = СтрМетоды + "
			|/// <remarks>
			|/// " + РазметитьОписание(Синтаксис.Описание) + "
			|/// </remarks>
			|///
			|";
			
			ТЗПараметров = Новый ТаблицаЗначений;
			ТЗПараметров.Колонки.Добавить("Порядок");
			ТЗПараметров.Колонки.Добавить("Параметр");
			
			для каждого ПараметрМетода из Выборка.Параметры цикл
				Если ПараметрМетода.Вариант = Синтаксис.Вариант Тогда
					СтрокаПараметра = ТЗПараметров.Добавить();
					СтрокаПараметра.Порядок = ПараметрМетода.Номер;
					СтрокаПараметра.Параметр = ПараметрМетода.Параметр;
				КонецЕсли;
			КонецЦикла;
			ТЗПараметров.Сортировать("Порядок возр");
			
			ПараметрыМетода = "";
			для каждого ПараметрМетода из ТЗПараметров цикл
				
				СтрТипыПараметра = "";
				для каждого ПараметрМетодаТип из ПараметрМетода.Параметр.Типы цикл
					СтрТипыПараметра = СтрТипыПараметра + ", " + ПараметрМетодаТип.Тип.Наименование + " (" + ПараметрМетодаТип.Тип.АнгИмя + ")";
				КонецЦикла;
				СтрТипыПараметра = Сред(СтрТипыПараметра,3);
				
				ТипПараметра = ПолучитьШарпТип(ПараметрМетода.Параметр.Типы);
				
				БлокОписанияТипов = "";
				если ПараметрМетода.Параметр.Типы.Количество() > 1 Тогда
					БлокОписанияТипов = " Типы: " + СтрТипыПараметра;
				КонецЕсли;
				
				СтрМетоды  = СтрМетоды + "/// <param name=""" + СокрЛП(ПараметрМетода.Параметр.Наименование) + """>" + РазметитьОписание(ПараметрМетода.Параметр.Описание) + БлокОписанияТипов + " </param>";
				СтрМетоды  = СтрМетоды + Символы.ПС;
				
				ПараметрыМетода  = ПараметрыМетода + ", " + ТипПараметра + " " + СокрЛП(ПараметрМетода.Параметр.Наименование) + ?(ПараметрМетода.Параметр.Обязательный,""," = null");
				
			КонецЦикла;
			СтрМетоды = СтрМетоды + "
			|///
			|";
			
			Если ПараметрыМетода <> "" Тогда
				ПараметрыМетода = Сред(ПараметрыМетода, 2);
			КонецЕсли;
			
			ВозвращаемоеЗначение = ?(Выборка.ВозвращаемыеЗначения.Количество() = 0, "void", ПолучитьШарпТип(Выборка.ВозвращаемыеЗначения));
			для каждого ВозратМетода из Выборка.ВозвращаемыеЗначения цикл
				СтрМетоды  = СтрМетоды + "/// <returns name=""" + СокрЛП(ВозратМетода.Тип.АнгИмя) + """>" + РазметитьОписание(ВозратМетода.Тип.Описание) + "</returns>";
				СтрМетоды  = СтрМетоды + Символы.ПС;
			КонецЦикла;
			СтрМетоды = СтрМетоды + "
			|///";
			
			СтрМетоды  = СтрМетоды + "
			|[ContextMethod(""" + СокрЛП(Выборка.Наименование) + """, """ + СокрЛП(Выборка.АнгИмя) + """)]
			|public " + ВозвращаемоеЗначение + " " + СокрЛП(Выборка.АнгИмя) + "(" + ПараметрыМетода + ")
			|{
			|	" + ?(ВозвращаемоеЗначение = "void", "", " return null;")  + "
			|}
			|
			|";
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбработатьСвойства(ТипИсточник)
	
	ВыборкаСвойства = Справочники.Свойства.Выбрать(,ТипИсточник);
	Пока ВыборкаСвойства.Следующий() Цикл
		
		ТипШарп = ПолучитьШарпТип(ВыборкаСвойства.Типы);
		
		СтрПриватныеЧлены  = СтрПриватныеЧлены + Символы.ПС + Символы.ВК + "private " + ТипШарп + " _" + СокрЛП(ВыборкаСвойства.АнгИмя);
		
		СтрТипыПараметра = "";
		для каждого ПараметрМетодаТип из ВыборкаСвойства.Типы цикл
			СтрТипыПараметра = СтрТипыПараметра + ", " + ПараметрМетодаТип.Тип.Наименование + " (" + ПараметрМетодаТип.Тип.АнгИмя + ")";
		КонецЦикла;
		СтрТипыПараметра = Сред(СтрТипыПараметра,3);
		
		СтрСвойства  = СтрСвойства + "
		|/// <summary>
		|/// " + РазметитьОписание(ВыборкаСвойства.Описание) + "
		|/// </summary>
		|/// <value>" + СтрТипыПараметра + "</value>
		|[ContextProperty(""" + ЧистаяСтрокаИмени(ВыборкаСвойства.Наименование) + """, """ + ЧистаяСтрокаИмени(ВыборкаСвойства.АнгИмя) + """)]
		|public " + ТипШарп + " " + ЧистаяСтрокаИмени(ВыборкаСвойства.АнгИмя) + "
		|{
		|	" + ?(ВыборкаСвойства.Чтение,"get { return _" + СокрЛП(ВыборкаСвойства.АнгИмя) + "; }","") + "
		|	" + ?(ВыборкаСвойства.Запись,"set { _" + СокрЛП(ВыборкаСвойства.АнгИмя) + " = value; }","") + "
		|}
		|
		|";
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбработатьОсновныеПараметры(ТипИсточник)
	
	СтрИспользования = СтрИспользования + "
	|using System;
	|using ScriptEngine.Machine;
	|using ScriptEngine.Machine.Contexts;
	|
	|";
	
	СтрОписаниеКласса = СтрОписаниеКласса + "
	|
	|/// <summary>
	|/// " + РазметитьОписание(ТипИсточник.Описание) + "
	|/// </summary>
	|[ContextClass(""" + СокрЛП(ТипИсточник.Наименование)  + """, """ + СокрЛП(ТипИсточник.АнгИмя) + """)]
	|class " + СокрЛП(ТипИсточник.АнгИмя) + " : AutoContext<" + СокрЛП(ТипИсточник.АнгИмя) + ">
	|";
	
КонецПроцедуры

Процедура ОбработатьКонструкторы(ТипИсточник)
	
	ИмяТипаДанных = СокрЛП(ТипИсточник.АнгИмя);
	
	СтрКонструкторы = "
	|
	|public " + ИмяТипаДанных + "()
	|{
	|}
	|
	|";
	
	Выборка = Справочники.Конструкторы.Выбрать(,ТипИсточник);
	Пока Выборка.Следующий() Цикл
		
		СтрКонструкторы  = СтрКонструкторы + "
		|/// <summary>
		|/// " + РазметитьОписание(Выборка.Описание) + "
		|/// </summary>
		|///
		|";
		
		ПараметрыМетода = "";
		для каждого ПараметрМетода из Выборка.Параметры цикл
			
			СтрТипыПараметра = "";
			для каждого ПараметрМетодаТип из ПараметрМетода.Параметр.Типы цикл
				СтрТипыПараметра = СтрТипыПараметра + ", " + ПараметрМетодаТип.Тип.Наименование + " (" + ПараметрМетодаТип.Тип.АнгИмя + ")";
			КонецЦикла;
			СтрТипыПараметра = Сред(СтрТипыПараметра,3);
			
			ТипПараметра = ПолучитьШарпТип(ПараметрМетода.Параметр.Типы);
			
			БлокОписанияТипов = "";
			если ПараметрМетода.Параметр.Типы.Количество() > 1 Тогда
				БлокОписанияТипов = " Типы: " + СтрТипыПараметра;
			КонецЕсли;
			
			СтрКонструкторы  = СтрКонструкторы + "/// <param name=""" + СокрЛП(ПараметрМетода.Параметр.Наименование) + """>" + РазметитьОписание(ПараметрМетода.Параметр.Описание) + БлокОписанияТипов + " </param>";
			СтрКонструкторы  = СтрКонструкторы + Символы.ПС;
			
			ПараметрыМетода  = ПараметрыМетода + ", " + ТипПараметра + " " + СокрЛП(ПараметрМетода.Параметр.Наименование) + ?(ПараметрМетода.Параметр.Обязательный,""," = null");
			
		КонецЦикла;
		СтрКонструкторы = СтрКонструкторы + "
		|///
		|";
		
		Если ПараметрыМетода <> "" Тогда
			ПараметрыМетода = Сред(ПараметрыМетода,2);
		КонецЕсли;
		
		СтрКонструкторы = СтрКонструкторы + "
		|[ScriptConstructor]
		|public static IRuntimeContextInstance Constructor(" + ПараметрыМетода + ")
		|{
		|	return new " + ИмяТипаДанных + "();
		|}
		|";
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбработатьТипДанных() Экспорт
	
	КартаТипов = Новый Соответствие;
	КартаТипов.Вставить(Справочники.Типы.Строка, "string");
	КартаТипов.Вставить(Справочники.Типы.Число, "int");
	КартаТипов.Вставить(Справочники.Типы.Булево, "bool");
	КартаТипов.Вставить(Справочники.Типы.Дата, "date");
	КартаТипов.Вставить(Справочники.Типы.Неопределено, "IValue");
	
	Для каждого СтрТипов из Типы Цикл
		
		СтрПриватныеЧлены = "";
		СтрОписаниеКласса = "";
		СтрСвойства = "";
		СтрМетоды = "";
		СтрКонструкторы = "";
		СтрИспользования = "";
		
		ОбработатьОсновныеПараметры(СтрТипов.ТипДанных);
		ОбработатьСвойства(СтрТипов.ТипДанных);
		ОбработатьМетоды(СтрТипов.ТипДанных);
		ОбработатьКонструкторы(СтрТипов.ТипДанных);
		
		Результат = "";
		Результат = Результат + СтрИспользования;
		Результат = Результат + СтрОписаниеКласса + "{";
		Результат = Результат + СтрПриватныеЧлены;
		Результат = Результат + СтрКонструкторы;
		Результат = Результат + СтрСвойства;
		Результат = Результат + СтрМетоды;
		
		Результат = Результат + "}";
		
		Текст = Новый ТекстовыйДокумент;
		Текст.УстановитьТекст(Результат);
		Текст.Записать(КаталогСохранения + "\" + СокрЛП(СтрТипов.ТипДанных.АнгИмя) + ".cs");
		
	КонецЦикла;
	
КонецПроцедуры
